import random

# Inventory data
inventory = {
    "top": [
        ("T-shirt", 0.0, "Casual", "Bright", 5),
        ("Formal Shirt", 120.0, "Business", "Dark", 3),
        ("Polo Shirt", 80.0, "Sportswear", "Bright", 4),
        ("Evening Blouse", 150.0, "Evening", "Dark", 3),
        ("Sweater", 0.0, "Casual", "Dark", 5),
        ("Hoodie", 60.0, "Casual", "Bright", 4),
        ("Tank Top", 0.0, "Sportswear", "Bright", 4),
        ("Silk Blouse", 200.0, "Evening", "Dark", 3)
    ],
    "bottom": [
        ("Jeans", 0.0, "Casual", "Dark", 4),
        ("Formal Trousers", 150.0, "Business", "Dark", 3),
        ("Sports Shorts", 0.0, "Sportswear", "Bright", 5),
        ("Skirt", 100.0, "Evening", "Bright", 3),
        ("Chinos", 90.0, "Business", "Dark", 4),
        ("Leggings", 60.0, "Casual", "Dark", 5),
        ("Athletic Pants", 80.0, "Sportswear", "Bright", 5),
        ("Evening Gown", 250.0, "Evening", "Dark", 1)
    ],
    "shoes": [
        ("Sneakers", 0.0, "Sportswear", "Bright", 5),
        ("Leather Shoes", 180.0, "Business", "Dark", 2),
        ("Running Shoes", 120.0, "Sportswear", "Bright", 5),
        ("Ballet Flats", 90.0, "Casual", "Dark", 4),
        ("High Heels", 250.0, "Evening", "Dark", 2),
        ("Sandals", 0.0, "Casual", "Bright", 5),
        ("Loafers", 150.0, "Business", "Dark", 3),
        ("Evening Pumps", 220.0, "Evening", "Bright", 2)
    ],
    "neck": [
        ("Silk Scarf", 70.0, "Business", "Dark", 3),
        ("Sports Scarf", 0.0, "Sportswear", "Bright", 4),
        ("Necklace", 220.0, "Evening", "Dark", 3),
        ("Casual Scarf", 0.0, "Casual", "Bright", 5),
        ("Bow Tie", 80.0, "Evening", "Dark", 3),
        ("Athletic Headband", 50.0, "Sportswear", "Bright", 5),
        ("Diamond Necklace", 750.0, "Evening", "Bright", 3),
        ("Choker", 0.0, "Evening", "Dark", 4)
    ],
    "purse": [
        ("Clutch Bag", 100.0, "Evening", "Dark", 3),
        ("Canvas Bag", 0.0, "Casual", "Bright", 5),
        ("Leather Briefcase", 180.0, "Business", "Dark", 1),
        ("Sports Backpack", 80.0, "Sportswear", "Bright", 5),
        ("Tote Bag", 0.0, "Casual", "Bright", 4),
        ("Wristlet", 150.0, "Evening", "Dark", 3),
        ("Fanny Pack", 50.0, "Sportswear", "Bright", 4),
        ("Elegant Handbag", 250.0, "Evening", "Dark", 3)
    ]
}

# Function to create an initial population
def init_population(pop_size):
    population = []
    for _ in range(pop_size):
        individual = {category: random.choice(items) for category, items in inventory.items()}
        population.append(individual)
    return population

# Fitness score function
def fitness_score(individual, dress_code, color_palette, budget, comfort_level):
    dress_code_score = sum(1 for item in individual.values() if item[2].upper() == dress_code) / len(inventory)
    color_score = sum(1 for item in individual.values() if item[3].upper() == color_palette) / len(inventory)
    comfort_score = sum(item[4] for item in individual.values()) / (len(inventory) * 5)
    total_price = sum(item[1] for item in individual.values())
    budget_score = 1 if total_price <= budget else 0  # Score is 1 if within budget, otherwise 0

    # Weights for different factors
    weights = {'dress_code': 0.35, 'color': 0.15, 'comfort': 0.15, 'budget': 0.35}

    fitness_value = (
        weights['dress_code'] * dress_code_score +
        weights['color'] * color_score +
        weights['comfort'] * comfort_score +
        weights['budget'] * budget_score
    )
    return fitness_value

# Binary tournament selection function
def tournament_selection(population, target_code, target_color, budget, comfort):
    # Get the first parent
    parent1 = max(population, key=lambda individual: fitness_score(individual, target_code, target_color, budget, comfort))
    
    # Remove the selected parent from the population to ensure a different selection for parent2
    remaining_population = [individual for individual in population if individual != parent1]
    
    # Select parent2 from the remaining population
    parent2 = random.choice(remaining_population)

    # Return both parents
    return parent1, parent2

# Ask the user for their name
user_name = input("Welcome to PerfectFit! What is your name? ")

# Greet the user
print(f"Hi {user_name}! Let's find your perfect outfit.")

# User inputs
dress_code_input = input("Please enter your dress code preference (Casual, Sportswear, Business, Evening): ").upper()
color_palette_input = input("Please enter your color palette preference (Dark, Bright): ").upper()
budget_input = float(input("Please enter your budget (in SAR): "))
comfort_input = int(input("Please enter your comfort level (1 (least comfortable) to 5 (most comfortable)): "))

# Initialize the population of outfits
pop_size = 10
outfits = init_population(pop_size)

# Perform selection to get two potential outfits (parents)
parent1, parent2 = tournament_selection(outfits, dress_code_input, color_palette_input, budget_input, comfort_input)

# Print the selected outfits
print(f"\nThank you, {user_name}. Here are your top outfit choices:")

for i, parent in enumerate([parent1, parent2], start=1):
    print(f"\nOutfit {i}:")
    for category, item in parent.items():
        print(f"  {category.capitalize()}: {item[0]} (SAR {item[1]}, Dress Code: {item[2]}, Color: {item[3]}, Comfort: {item[4]})")
    print(f"Fitness Score: {fitness_score(parent, dress_code_input, color_palette_input, budget_input, comfort_input):.2f}")
